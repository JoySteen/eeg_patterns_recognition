signal = get_signal('m');
Cz = signal(2, :);

N = size(Cz, 2);
Fs = 250;

filters = {
    struct( ...
        'filter', filter_4Hz, ...
        'f0', 1, ...
        'f1', 5 ...
    ), ...
    struct(  ...
        'filter', filter_7Hz, ...
        'f0', 5, ...
        'f1', 10 ...
    ), ...
    struct( ...
        'filter', filter_10Hz, ...
        'f0', 8, ...
        'f1', 13 ...
    ), ...
    struct( ...
        'filter', filter_14Hz, ...
        'f0', 11, ...
        'f1', 17 ...
    ), ...
    struct( ...
        'filter', filter_15Hz, ...
        'f0', 15, ...
        'f1', 80 ...
    ) ...
};

estim = @(epochs) deal(mean(epochs), std(epochs));

epochs = identify_epochs(signal, Fs);
N_epochs = size(epochs, 2);

[Mt, Dt] = estim(epochs);
scale = [1:N_epochs] / Fs;
plot_estimation(scale, Mt, Dt);

epochs_spectrum = abs(fft(epochs, [], 2));
[Mf, Df] = estim(epochs_spectrum);
scale = [1:N_epochs] * Fs / N_epochs;
plot_estimation(scale, Mf, Df);

windowWidth = 1000;
stepWidth = 60;
for i = windowWidth : stepWidth : N
    start = i - windowWidth + 1;
    finish = i;
    window = Cz(start : finish);
    plot_psd(window, Fs, filters, sprintf('%g - %g', start/Fs, finish/Fs));
    break;
end